  public static void SelectionSort(int[]);
    descriptor: ([I)V
    flags: (0x0009) ACC_PUBLIC, ACC_STATIC
    Code:
      stack=4, locals=4, args_size=1  // localvariable 0 = arr, localvariable 1 = i, localvariable 2 = least, localvariable 3 = j
         0: iconst_0                  // load the int value 0 onto the stack 
         1: istore_1                  // store int value into variable 1 ( i = 0 )
         2: iload_1                   // load an int value from local variable 1 ( i )
         3: aload_0                   // load a reference onto the stack from local variable 0 ( arr )
         4: arraylength               // get the length of an array 
         5: if_icmpge     57          // if ints are equal, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 | branchbyte2) (i >= arr)
         8: iload_1                   // load an int value from local variable 1 ( i )
         9: istore_2                  // store int value into variable 2 ( least = instruction 8(i))
        10: iload_1                   // load an int value from local variable 1 ( i )
        11: iconst_1                  // load the int value 1 onto the stack ( 1 )
        12: iadd                      // add two ints ( i + 1 )
        13: istore_3                  // store int value into variable 3 ( j = instruction 12 )
        14: iload_3                   // load an int value from local variable 3 ( j )
        15: aload_0                   // load a reference onto the stack from local variable 0 ( arr )
        16: arraylength               // get the length of an array 
        17: if_icmpge     37          // if ints are equal, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 | branchbyte2) ( j >= arr )
        20: aload_0                   // load a reference onto the stack from local variable 0 ( arr )
        21: iload_3                   // load an int value from local variable 3 ( j )
        22: iaload                    // load an int from an array ( arr[j] )
        23: aload_0                   // load a reference onto the stack from local variable 0 ( arr )
        24: iload_2                   // load an int value from local variable 2 ( least )
        25: iaload                    // load an int from an array 
        26: if_icmpge     31          // if ints are equal, branch to instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 | branchbyte2)
        29: iload_3                   // load an int value from local variable 3 ( j )
        30: istore_2                  // store int value into variable 2
        31: iinc          3, 1        // increment local variable #index (3) by signed byte const 1
        34: goto          14          // goes to another instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 | branchbyte2)
        37: aload_0                   // load a reference onto the stack from local variable 0
        38: iload_1                   // load an int value from local variable 1
        39: iaload                    // load an int from an array
        40: istore_3                  // store int value into variable 3
        41: aload_0                   // load a reference onto the stack from local variable 0
        42: iload_1                   // load an int value from local variable 1
        43: aload_0                   // load a reference onto the stack from local variable 0
        44: iload_2                   // load an int value from local variable 2
        45: iaload                    // load an int from an array
        46: iastore                   // store an int into an array
        47: aload_0                   // load a reference onto the stack from local variable 0
        48: iload_2                   // load an int value from local variable 2
        49: iload_3                   // load an int value from local variable 3
        50: iastore                   // store an int into an array
        51: iinc          1, 1        // increment local variable #index (1) by signed byte const (1)
        54: goto          2           // goes to another instruction at branchoffset (signed short constructed from unsigned bytes branchbyte1 << 8 | branchbyte2)
        57: return                    // return
      LineNumberTable:                // and so on
        line 21: 0
        line 22: 8
        line 23: 10
        line 24: 20
        line 25: 29
        line 23: 31
        line 26: 37
        line 21: 51
        line 28: 57
      StackMapTable: number_of_entries = 5
        frame_type = 252 /* append */
          offset_delta = 2
          locals = [ int ]
        frame_type = 253 /* append */
          offset_delta = 11
          locals = [ int, int ]
        frame_type = 16 /* same */
        frame_type = 250 /* chop */
          offset_delta = 5
        frame_type = 249 /* chop */
          offset_delta = 19

  static {};
    descriptor: ()V
    flags: (0x0008) ACC_STATIC
    Code:
      stack=2, locals=0, args_size=0
         0: new           #15                 // class java/util/Random
         3: dup
         4: invokespecial #43                 // Method java/util/Random."<init>":()V
         7: putstatic     #7                  // Field rnd:Ljava/util/Random;
        10: return
      LineNumberTable:
        line 18: 0
}
SourceFile: "Selsort.java"
BootstrapMethods:
  0: #55 REF_invokeStatic java/lang/invoke/StringConcatFactory.makeConcatWithConstants:(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/invoke/CallSite;
    Method arguments:
      #61 \u0001
InnerClasses:
  public static final #68= #64 of #66;    // Lookup=class java/lang/invoke/MethodHandles$Lookup of class java/lang/invoke/MethodHandles
